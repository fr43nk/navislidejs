(function(t, n) {
    for (var e in n) t[e] = n[e];
})(window, function(t) {
    var n = {};
    function e(i) {
        if (n[i]) {
            return n[i].exports;
        }
        var s = n[i] = {
            i: i,
            l: false,
            exports: {}
        };
        t[i].call(s.exports, s, s.exports, e);
        s.l = true;
        return s.exports;
    }
    e.m = t;
    e.c = n;
    e.d = function(t, n, i) {
        if (!e.o(t, n)) {
            Object.defineProperty(t, n, {
                configurable: false,
                enumerable: true,
                get: i
            });
        }
    };
    e.n = function(t) {
        var n = t && t.__esModule ? function n() {
            return t["default"];
        } : function n() {
            return t;
        };
        e.d(n, "a", n);
        return n;
    };
    e.o = function(t, n) {
        return Object.prototype.hasOwnProperty.call(t, n);
    };
    e.p = "";
    return e(e.s = 0);
}([ function(t, n, e) {
    "use strict";
    Object.defineProperty(n, "__esModule", {
        value: true
    });
    var i = e(1);
    var s = e.n(i);
    var a = e(2);
    e.d(n, "NaviSlideJs", function() {
        return a["a"];
    });
}, function(t, n) {}, function(t, n, e) {
    "use strict";
    e.d(n, "a", function() {
        return r;
    });
    var i = e(3);
    var s = e.n(i);
    var a = e(4);
    var o = e(5);
    function r(t) {
        var n = this;
        this.options = {
            navigationListId: "navigation_list",
            navigationButtonId: "navigation_button",
            rotateLeftClass: "rot-45",
            rotateRightClass: "rot--45",
            opacityClass: "opacity-0",
            blurParentId: ""
        };
        this.doHide = false;
        this.isReady = true;
        this.isAnimating = false;
        this.navList = null;
        this.navButton = null;
        this.blurParentElm = null;
        this.transEvs = o["a"]();
        this.hasTransitionEvs = n.transEvs.start !== "" && n.transEvs.end !== "";
        this.blurElem = document.createElement("div");
        this.blurElem.classList.add("blur");
        this.blurElem.classList.add("hide-blur");
        this.init(t);
    }
    r.prototype.init = function(t) {
        var n = this;
        if (t !== undefined) {
            Object.keys(t).forEach(function(e, i) {
                Object.keys(n.options).forEach(function(i, s) {
                    if (e === i) {
                        n.options[e] = t[e];
                    }
                });
            });
        }
        n.navList = document.getElementById(n.options.navigationListId);
        n.navButton = document.getElementById(n.options.navigationButtonId);
        var e = null;
        if (n.options.blurParentId === "") {
            e = document.getElementsByTagName("body");
            n.blurParentElm = typeof e !== "undefined" && e !== null && e.length > 0 ? e[0] : null;
        } else {
            n.blurParentElm = document.getElementById(n.options.blurParentId);
        }
        if (n.blurParentElm) {
            var i = n.blurParentElm.children[0];
            n.blurParentElm.insertBefore(n.blurElem, i);
            if (n.hasTransitionEvs) {
                n.blurElem.addEventListener(n.transEvs.end, function() {
                    n.isAnimating = true;
                });
                n.blurElem.addEventListener(n.transEvs.end, function() {
                    if (n.isAnimating === true) {
                        if (n.doHide === false) {
                            n.blurElem.classList.remove("hide-blur");
                        } else {
                            n.blurElem.classList.remove("show-blur");
                            n.blurElem.classList.add("hide-blur");
                        }
                        n.isAnimating = false;
                        n.isReady = true;
                    }
                });
            }
        }
        n.setupEvents();
    };
    r.prototype.setupEvents = function() {
        var t = this;
        a["a"](this.navButton, function() {
            if (t.isReady === true || t.hasTransitionEvs === false) {
                t.isReady = false;
                if (t.navList.classList.contains("show")) {
                    t.doHide = true;
                    t.navList.classList.remove("show");
                    t.blurElem.classList.remove("opacity-1");
                    t.navButton.classList.remove("bg-none");
                    t.navButton.children[0].classList.remove(t.options.rotateLeftClass);
                    t.navButton.children[1].classList.remove(t.options.opacityClass);
                    t.navButton.children[2].classList.remove(t.options.rotateRightClass);
                } else {
                    t.doHide = false;
                    t.blurElem.classList.add("show-blur");
                    window.setTimeout(function() {
                        t.blurElem.classList.add("opacity-1");
                    }, 23);
                    t.navList.classList.add("show");
                    t.navButton.classList.add("bg-none");
                    t.navButton.children[0].classList.add(t.options.rotateLeftClass);
                    t.navButton.children[1].classList.add(t.options.opacityClass);
                    t.navButton.children[2].classList.add(t.options.rotateRightClass);
                }
            }
        });
    };
}, function(t, n, e) {
    "use strict";
    function i() {
        var t = function(t) {
            return new RegExp("(^| )" + t + "( |$)");
        };
        var n = function(t, n, e) {
            for (var i = 0; i < t.length; i++) {
                n.call(e, t[i]);
            }
        };
        function e(t) {
            this.element = t;
        }
        e.prototype = {
            add: function() {
                n(arguments, function(t) {
                    if (!this.contains(t)) {
                        this.element.className += this.element.className.length > 0 ? " " + t : t;
                    }
                }, this);
            },
            remove: function() {
                n(arguments, function(n) {
                    this.element.className = this.element.className.replace(t(n), "");
                }, this);
            },
            toggle: function(t) {
                return this.contains(t) ? (this.remove(t), false) : (this.add(t), true);
            },
            contains: function(n) {
                return t(n).test(this.element.className);
            },
            replace: function(t, n) {
                this.remove(t), this.add(n);
            }
        };
        if (!("classList" in Element.prototype)) {
            Object.defineProperty(Element.prototype, "classList", {
                get: function() {
                    return new e(this);
                }
            });
        }
        if (window.DOMTokenList && DOMTokenList.prototype.replace == null) {
            DOMTokenList.prototype.replace = e.prototype.replace;
        }
    }
    i();
}, function(t, n, e) {
    "use strict";
    var i = false;
    function s(t, n) {
        if (t !== null && n !== null) {
            t.addEventListener("touchend", function(t) {
                t.preventDefault();
                if (i === false) {
                    i = true;
                    n();
                    window.setTimeout(function() {
                        i = false;
                        console.log("Reset");
                    }, 600);
                }
            });
            t.addEventListener("click", function(t) {
                t.preventDefault();
                if (i === false) n();
            });
        }
    }
    n["a"] = s;
}, function(t, n, e) {
    "use strict";
    function i() {
        var t, n = document.createElement("fakeelement");
        var e = {
            transition: "transitionend",
            OTransition: "oTransitionEnd",
            MozTransition: "transitionend",
            WebkitTransition: "webkitTransitionEnd"
        };
        var i = {
            transition: "transitionstart",
            OTransition: "oTransitionStart",
            MozTransition: "transitionstart",
            WebkitTransition: "webkitTransitionStart"
        };
        var s = {
            start: "",
            end: ""
        };
        for (t in e) {
            if (n.style[t] !== undefined) {
                s.end = e[t];
                break;
            }
        }
        for (t in i) {
            if (n.style[t] !== undefined) {
                s.start = i[t];
                break;
            }
        }
        return s;
    }
    n["a"] = i;
} ]));